

import json
import time
import os
from gpiozero import Button
import math
import statistics
import requests

lastConnectionTime = time.time()
lastUpdateTime = time.time()
postingInterval = 900
updateInterval = 60
writeAPIkey = "YOUR_WRITE_API_KEY"
channelID = "YOUR_CHANNEL_ID"
url = "https://api.thingspeak.com/channels/" + channelID + "/bulk_update.json"
messageBuffer = []

def httpRequest(data):
    global lastConnectionTime
    lastConnectionTime = time.time()
    
    headers = {'Content-Type': 'application/json'}
    params = {'api_key': writeAPIkey}
    response = requests.post(url, headers=headers, params=params, json=data)

    if response.status_code == 200:
        print("Data sent successfully to ThingSpeak")
    else:
        print("Failed to send data. Status code:", response.status_code)

def updatesJson():
    data = {
        'write_api_key': writeAPIkey,
        'updates': [
            {'field1': mean(speed_list)}  # Update 'field1' with the mean wind speed
            # Add more fields as needed
        ]
    }
    httpRequest(data)

# Rest of your code remains unchanged...

if __name__ == "__main__":
    while 1:
        if time.time() - lastUpdateTime >= updateInterval:
            updatesJson()

    while mean(speed_list) > 9 and mean(speed_list) < 18:
        if True:
            print("het is tijd om te zeilen")
        if False:
            print("geen reden om naar buiten te gaan")


    # Implement your logic for updating JSON data
    pass
# om de wind snelheid te berekenen gebruik ik een reed switch, die aan gaat wanneer een magneet langs gaat.
# wanneer de as (met een magneet) van de anemometer langs 
def calculate_speed(time_sec):
    global wind_count
    circumference_cm = (2 * math.pi) * radius_cm
    rotations = wind_count / 2.0
    dist_km = circumference_cm * rotations / 100000.0  # Convert to kilometers
    speed = dist_km / time_sec
    return speed

def mean(speed_list):
    return statistics.mean(speed_list)

wind_speed_sensor = Button(5)
wind_count = 0
radius_cm = 9.0
wind_interval = 5
speed_list = []

def spin():
    global wind_count
    wind_count = wind_count + 1

wind_speed_sensor.when_pressed = spin

while True:
    wind_count = 0
    time.sleep(wind_interval)
    wind_speed = calculate_speed(wind_interval)
    speed_list.append(wind_speed)
    print("Wind Speed:", wind_speed, "km/h")
    print("Mean Wind Speed:", mean(speed_list), "km/h")
```
if __name__ == "__main__":
    while 1:
        if time.time() - lastUpdateTime >= updateInterval:
            updatesJson()

while mean(speed_list) > 9 or <18 
    if True 
        print("het is tijd om te zeilen")
    if False 
        print("geen reden om naar buiten te gaan")
    
    
